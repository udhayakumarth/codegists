# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: springapp - Build JAR Package 

on:
  push:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ./springapp
        
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Set MongoDB URL as Environment Variable
      run: echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV
    - name: Set GOOGLE_AUTH_CLIENT_ID as Environment Variable
      run: echo "GOOGLE_AUTH_CLIENT_ID=${{ secrets.GOOGLE_AUTH_CLIENT_ID}}" >> $GITHUB_ENV
    - name: Set GOOGLE_AUTH_CLIENT_SECRET as Environment Variable 
      run: echo "GOOGLE_AUTH_CLIENT_SECRET=${{ secrets.GOOGLE_AUTH_CLIENT_SECRET}}" >> $GITHUB_ENV
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle
      run: ./gradlew build

    - name: Get the JAR file name
      id: jar_name
      run: echo "JAR_NAME=$(ls ./springapp/build/libs/*.jar | xargs -n 1 basename)" >> $GITHUB_ENV

    - name: Extract version from JAR file name
      id: version
      run: |
        VERSION=$(basename ${{ env.JAR_NAME }} .jar | sed 's/^springapp-//')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create a Release
      uses: gh-cli/gh-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"  # Use the version extracted from the JAR file
        release_name: "Release v${{ env.VERSION }}"
        body: "This is a release containing the built JAR file"
        files: "./springapp/build/libs/${{ env.JAR_NAME }}"

    - name: Upload JAR file to Release
      uses: gh-cli/gh-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"  # Match this with the same release tag used above
        files: "./springapp/build/libs/${{ env.JAR_NAME }}"

